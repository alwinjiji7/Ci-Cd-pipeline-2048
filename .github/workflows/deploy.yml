name: Deploy Resume Project

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: 2048-game-repo
  PROJECT_NAME: 2048-game
  ECS_SERVICE_NAME: 2048-service
  ECS_CLUSTER_NAME: 2048-cluster

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install
        
      - name: Run tests
        run: npm test

  build:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  container-test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Test Docker container
        run: |
          # Pull the image built in the previous job
          docker pull ${{ needs.build.outputs.image }}
          
          # Test that the container starts and nginx serves content
          docker run -d --name test-container -p 8080:80 ${{ needs.build.outputs.image }}
          sleep 5
          
          # Test that the server responds
          if curl -f http://localhost:8080; then
            echo "‚úÖ Container is serving content successfully"
          else
            echo "‚ùå Container failed to serve content"
            exit 1
          fi
          
          # Cleanup
          docker stop test-container
          docker rm test-container
          
  deploy:
    runs-on: ubuntu-latest
    needs: [build, container-test]  
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Download current task definition
        run: |
          aws ecs describe-task-definition --task-definition $PROJECT_NAME --query taskDefinition > task-definition.json
          
      - name: Update task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.PROJECT_NAME }}
          image: ${{ needs.build.outputs.image }}
          
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
          
      - name: Get Load Balancer URL
        run: |
          ALB_ARN=$(aws elbv2 describe-load-balancers --names "$PROJECT_NAME-alb" --query 'LoadBalancers[0].LoadBalancerArn' --output text)
          ALB_DNS=$(aws elbv2 describe-load-balancers --load-balancer-arns $ALB_ARN --query 'LoadBalancers[0].DNSName' --output text)
          echo "üöÄ Application deployed successfully!"
          echo "üåê Access your project at: http://$ALB_DNS"